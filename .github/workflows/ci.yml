name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort ruff mypy
      
      - name: Check Rust formatting
        run: cargo fmt --check
      
      - name: Rust clippy
        run: cargo clippy --all-targets --all-features
      
      - name: Python formatting (black)
        run: black --check . || true
      
      - name: Python import sorting (isort)
        run: isort --check-only . || true
      
      - name: Python linting (ruff)
        run: ruff check . || true

  test:
    name: Test Suite
    needs: lint-and-format
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          - os: windows-latest
            python-version: '3.9'
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev
      
      - name: Install maturin
        run: pip install maturin
      
      - name: Build package
        run: |
          # Build without http3-quiche to avoid linker issues on Linux
          maturin build --release --features native-tls,http2-enhanced
      
      - name: Install package (Unix)
        if: runner.os != 'Windows'
        run: pip install target/wheels/*.whl
      
      - name: Install package (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $wheel = Get-ChildItem -Path "target/wheels" -Filter "*.whl" | Select-Object -First 1
          pip install $wheel.FullName
      
      - name: Install test dependencies
        run: |
          pip install pytest pytest-asyncio pytest-benchmark
          pip install httpx aiohttp requests
      
      - name: Run tests
        run: pytest tests/ -v --tb=short || true

  build-wheels:
    name: Build Wheels
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install maturin
        run: pip install maturin
      
      - name: Build wheels
        run: maturin build --release --strip
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: target/wheels/

  build-sdist:
    name: Build Source Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install maturin
        run: pip install maturin
      
      - name: Build source distribution
        run: maturin sdist
      
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: source-distribution
          path: target/wheels/*.tar.gz
